// debugging: cmd+option+i
// set up
-install:
      -- install react react-dom electron 
      -- npm i @babel/core @babel/preset-env @babel/preset-react babel-loader css-loader style-loader sass-loader sass webpack-cli webpack electron-reload -d
- create main.js
- run npm init -y
- add to scripts in package.json: 
    -- "main": "main.js",
    -- "start": "electron ."
    -- "watch":"webpack --config webpack.common.js --watch"
-create html file : index.html
- create a file  webpack.common.js
- create folder src/js 
    -- create file index.js 
                import React from "react";
                import ReactDOM  from "react-dom/client";

                const root = ReactDOM.createRoot(document.getElementById('root'));

                root.render(<h1>React and electronjs</h1>)
    --
-run each of these in diff terminals
        - npm run watch
        - npm start

///////scripts
-- index.html
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta name="keywords" content="portfolio, web developer, nextjs, react-native, styled-components, reactjs, javascript, reduxjs,css3, html5,  frontend">
            <meta name="description" content="Mr.kouhadi's portfolio website for presenting his skills and projects.">
            <title>Electron-Reactjs app</title>
        </head>
        <body>
            <div id="root"></div>
            <script src="./build/js/app.js"></script>
        </body>
        </html>

-- webpack.common.js
                    const path = require('path');

                    module.exports = {
                    mode: 'development',
                    entry: './src/js/index.js',
                    devtool: 'inline-source-map',
                    target: 'electron-renderer',
                    module: {
                        rules: [
                        {
                            test: /\.js$/,
                            exclude: /node_modules/,
                            use: {
                            loader: 'babel-loader',
                            options: {
                                presets: [[
                                '@babel/preset-env', {
                                    targets: {
                                    esmodules: true
                                    }
                                }],
                                '@babel/preset-react']
                            }
                            }
                        },
                        {
                            test: [/\.s[ac]ss$/i, /\.css$/i],
                            use: [
                            // Creates `style` nodes from JS strings
                            'style-loader',
                            // Translates CSS into CommonJS
                            'css-loader',
                            // Compiles Sass to CSS
                            'sass-loader',
                            ],
                        }
                        ]
                    },
                    resolve: {
                        extensions: ['.js'],
                    },
                    output: {
                        filename: 'app.js',
                        path: path.resolve(__dirname, 'build', 'js'),
                    },
                    };

-- main.js
        const { app, BrowserWindow, ipcMain, Notification } = require('electron')
            const path = require('path')
            const isDev = !app.isPackaged;

            const createWindow = () => {
            const mainWindow = new BrowserWindow({
                width: 800,
                height: 600,
                webPreferences: {
                nodeIntegration:false,
                worldSafeExecuteJavascript:true,
                contextIsolation:true,
                preload:path.join(__dirname, 'preload.js'),
                }
            })
            mainWindow.loadFile('index.html')
        }
        if(isDev){
            // compiling code when changing it
            require('electron-reload')(__dirname, {
                electron:path.join(__dirname, 'node_modules', '.bin', 'electron')
            })
        }
        app.whenReady().then(() => {
            createWindow()
            app.on('activate', () => {
                if (BrowserWindow.getAllWindows().length === 0) createWindow()
            })
        })

        app.on('window-all-closed', () => {
            if (process.platform !== 'darwin') app.quit()
        })

        ipcMain.on('notify', (_, message)=>{
            new Notification({title:'Notification', body:message}).show()
        })


-- preload.js

        const { ipcRenderer, contextBridge } = require('electron');
        contextBridge.exposeInMainWorld('electron', {
        notificationApi: {
            sendNotification(message) {
            ipcRenderer.send('notify', message);
            }
        },
        batteryApi: {
        },
        filesApi: {
        }
        })

